---
title: "AR_confirmation_p285"
format: html
editor: visual
---

Confirmation of accounts receivable, and physical count of inventory are often the largest expenses in the audit budget.  Confirmation of accounts receivable involves contacting the client's customers directly and ask them to confirm the amounts of unpaid accounts receivable as of the end of the reporting period they are auditing. This is primarily for larger account balances, but may include a few random customers having smaller outstanding invoices.

Where it is not possible to directly confirm accounts receivable, verify that customers have paid the invoices, review payment information and trace payments to client's bank account.  These are called 'secondary confirmation procedures' are a applied after failure of direct confirmation after several attempts.  



```{r eval=T, error=F, message=F, warning=F, fig.cap="Customer Balances for Sampling and Confirmation"}

library(pwr)
library(tidyverse)
library(kableExtra)

intolerable_error <- 5000  


## Effect size (Cohen's d):
## difference between the means from H0 & Ha divided by the pooled standard deviation 
cohen_d <- intolerable_error / sd(unpaid_ar_by_cust$customer_ye_balance)   

sample_size <- pwr.t.test(
  d=cohen_d, 
  sig.level = 0.05, 
  power = .8,
  type="one.sample", 
  alternative="greater") ## look for overstatement of AR = assets overstated

ar_sample <- sample_n(unpaid_ar_by_cust, ceiling(sample_size$n), replace=T)


kable(ar_sample, 
      caption = "Customer Balances for Sampling and Confirmation",
      "latex",
      booktabs = T) %>% 
  kable_styling(bootstrap_options = "striped")

```


### Confirmation and Estimation of Error in Account

Once the auditor has completed the confirmation and follow-up for confirmation of accounts receivable, the sample results can be used to compute an upper bound on the accounts receivable balance.  Were the client to post a balance in excess of this upper bound, the accounts receivable balance could be considered intolerably (materially) in error.  


```{r  error=F, warning=F, message=F, eval=F}

library(tidyverse)
library(lubridate)

default_dir <- "/home/westland/audit_analytics_book/audit_simulated_files/"

if (file.exists(default_dir)){
    setwd(default_dir)
} else {
    dir.create(default_dir)
    setwd(default_dir)
}

real_world_credit_sales <- 
  read.csv("real_world_credit_sales.csv", na.strings="0", stringsAsFactors=FALSE)
real_world_fyear_end_ar_ledger <- 
  read_csv("real_world_fyear_end_ar_ledger.csv", 
    col_types = cols(X1 = col_skip()))

## create real_world_unpaid_ar & real_world_ar_by_customer 
## note that these 'real_world' values are not available to the auditor
## the auditor extracts information about them 
## from a sample of obtained after the A/R audit confirmation process

real_world_unpaid_ar <- 
  real_world_credit_sales[
    real_world_credit_sales$collection_date >= fyear_end & 
      real_world_credit_sales$shipper_date <= fyear_end,]


real_world_ar_by_customer <- 
  real_world_unpaid_ar %>% 
  group_by(customer_no) 


real_world_ar_by_customer$sales_extended <-
  real_world_ar_by_customer$sales_count *
  real_world_ar_by_customer$sales_unit_price

real_world_ar_by_customer %>% 
    group_by(customer_no) %>% 
    summarize(customer_ye_balance = sum(sales_extended))


## use the clients transaction files to compute the sample as a % of population

post_confirm_ar_balances <- 
  left_join(ar_sample,real_world_fyear_end_ar_ledger, by="customer_no") 

post_confirm_ar_balances[is.na(post_confirm_ar_balances)] <- 0
post_confirm_ar_balances <- 
  post_confirm_ar_balances %>% 
  mutate(balance_per_customer = customer_ye_balance * confirm_pct) %>% 
  select(customer_no, customer_ye_balance, balance_per_customer) %>% 
  mutate(overstatement=customer_ye_balance - balance_per_customer)

mean_trans_error <- mean(post_confirm_ar_balances$overstatement)
sd_trans_error <- sd(post_confirm_ar_balances$overstatement)
population_error_est_95_ub <- 
  nrow(fyear_end_ar_ledger) *
  1.96 * sd_trans_error +
  mean_trans_error

cat("\n\n Population error estimate 95% upper conf bound = ", population_error_est_95_ub)

```
```
Population error estimate 95% upper conf bound =  820351.3

```

### Post Confirmation Tests

After confirmations are received, and secondary follow-up procedures are pursued to confirm the balances, the following code chunk presents the results.

```{r  error=F, warning=F, message=F, eval=F}

library(kableExtra)


ar_working_papers <- 
  full_join(stratum_est,real_world_fyear_end_ar_ledger, by="customer_no")

kable(ar_working_papers, caption = "Audit Workpapers for A/R Confirmation","latex", booktabs = T) %>% 
  kable_styling(bootstrap_options = "striped")

```

Post-confirmation the figure of interest is the error in the population (and whether or not it is material).  I investigate the performance of stratified and PPS sampling to estimate populations error, starting with a file of errors in the confirmed A/R balances.  Clearly, this will not be available to the auditor, rather only a sample of it will be.  I provide it to benchmark the performance of a 3-stratum and PPS approach to sampling.  I calculate overstatements of the A/R account because the Conservatism principle dictates that I want to find errors that overstate income (thus A/R balance overstated).

The R *survey* package supports PPS (i.e.,, arbitrary unequal probability) sampling with replacement, or using the with-replacement single-stage approximation to a multistage
design. No special notation is required: just specify the correct sampling weights.  To specify a PPS design, the sampling probabilities must be given in the prob argument of `svydesign`, or in the `fpc` argument, with prob and weight unspecified. In addition, it is necessary to specify which PPS computation should be used, with the `pps` argument. The optional variance argument species the Horvitz-Thompson (variance="HT") or Yates-Grundy
(variance="YG") estimator, with the default being "HT".

```{r eval=F, error=F, warning=F, message=F }

library(TeachingSampling)
library(tidyverse)
library(broom)
library(knitr)
library(kableExtra)
library(survey)

unpaid_ar <- 
  sales_journal[1:15] %>% 
  filter(cash_not_ar == 0 & 
         collection_date >= fyear_end &
         shipper_date <= fyear_end) %>% 
  select(-X)

confirmed_unpaid_ar <- 
  real_world_credit_sales %>% 
  filter(collection_date >= fyear_end &
         shipper_date <= fyear_end) %>% 
  select(-X) %>% 
  select(customer_no, 
         invoice_no, 
         invoice_date, 
         sales_count, 
         sales_return, 
         sales_unit_price) %>% 
  mutate(real_sales = sales_unit_price * (sales_count-sales_return)) %>% 
  left_join(unpaid_ar, by="invoice_no") %>% 
  mutate(overstatement = sales_extended - real_sales) %>% 
  select(customer_no =customer_no.x,
         invoice_no = invoice_no,
         invoice_date = invoice_date.x, 
         overstatement)
confirmed_unpaid_ar[is.na(confirmed_unpaid_ar)] <- 0



## Separate the dataset into three strata and set the sample proportions
confirmed_unpaid_ar$stratum <- 
  cut(confirmed_unpaid_ar$overstatement, breaks=3, labels=c("small", "medium", "large")) 

sample_prop <- data.frame(prop = c(.05,.1,.2), stratum = c("small", "medium", "large"))

# Define the size of each stratum
N <- NULL
for(i in 1:3) N[i] <- summary(confirmed_unpaid_ar$stratum)[[i]]
Nh <- as.numeric(N[1:3])                          ## vector of stratum sizes
nh = as.numeric(ceiling(N * sample_prop$prop))    ## vector of samples size by stratum

# Draw a stratified sample and estimate
samp <- S.STSI(confirmed_unpaid_ar$overstatement, Nh, nh)
ar_sample <- confirmed_unpaid_ar[samp,]

est <- data.frame(confirmed_unpaid_ar$overstatement)
estimate <- E.STSI(confirmed_unpaid_ar$stratum, Nh, nh, est )

## normalize the estimate to reflect the number of transactions in the client's file
normalized_estimate <-  nrow(confirmed_unpaid_ar) * estimate[,,2]/estimate[1,,1]
normalized_estimate <- round(normalized_estimate, digits=0)

tidy(normalized_estimate) %>%
kable(caption = "3-Stratum Horvitzâ€“Thompson estimate of Total Error in A/R Balance") %>% 
  kable_styling(bootstrap_options = "striped")

```

```{r}


# Draw a PPS sample of size 'size' and estimate draw a random sample according to a
# PPS with replacement design
size <- 5
sample_prop <- S.PPS(size,confirmed_unpaid_ar$overstatement)   
# returns a matrix of m rows and two columns. 
# Each element of the first column indicates the unit that was selected. 
# Each element of the second column indicates the selection probability of this unit

sample_ar <- confirmed_unpaid_ar[sample_prop[,1],]

est <- data.frame(confirmed_unpaid_ar$overstatement)
estimate <- E.PPS(est,sample_prop[,2])


## normalize the estimate to reflect the number of transactions in the client's file
normalized_estimate <-  nrow(unpaid_ar) * estimate[,2]/estimate[1,1]
normalized_estimate <- round(normalized_estimate, digits=0)

tidy(normalized_estimate) %>%
kable(caption = "PPS Hansen-Hurwitz Estimate of Overstatement of A/R account balance","latex", booktabs = T) %>% 
  kable_styling(bootstrap_options = "striped")

actual_overstatement <- sum(confirmed_unpaid_ar$overstatement)
cat("\n\n Actual Overstatement of A/R balance in Population = ",actual_overstatement)
```

