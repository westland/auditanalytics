reticulate::repl_python()
quit
knitr::opts_chunk$set(echo = TRUE)
reticulate::py_install("matplotlib")
reticulate::repl_python()
import pandas as pd
from eod import EodHistoricalData
# Initialize the EOD client with your API key
api_key = "67589708e16331.09646582" #"your api key here"  # Replace with your actual API key
client = EodHistoricalData(api_key)
# Define the stock ticker
stock_ticker = "TSLA.US"
# Download financial statements
balance_sheet = client.get_fundamental_equity(stock_ticker, filter_='Financials::Balance_Sheet::yearly')
income_statement = client.get_fundamental_equity(stock_ticker, filter_='Financials::Income_Statement::yearly')
cash_flow_statement = client.get_fundamental_equity(stock_ticker, filter_='Financials::Cash_Flow::yearly')
# Convert the retrieved data into DataFrames for easier analysis
df_balance_sheet = pd.DataFrame(balance_sheet).T
df_income_statement = pd.DataFrame(income_statement).T
df_cash_flow_statement = pd.DataFrame(cash_flow_statement).T
# Display the first few rows of the income statement
print(df_income_statement.head())
import pandas as pd
from eod import EodHistoricalData
from datetime import datetime
# Initialize the EOD client with your actual API key
api_key = "67589708e16331.09646582"# 'your_actual_api_key'  # Replace with your actual API key
client = EodHistoricalData(api_key)
# Define the stock ticker
stock_ticker = "TSLA.US"
# Function to retrieve income data for a specific year
def get_income_data(year):
income_data = client.get_fundamental_equity(stock_ticker, filter_='Financials::Income_Statement::yearly')
# Filter for the specific year
return [item for item in income_data if datetime.strptime(item['endDate'], "%Y-%m-%d").year == year]
# Retrieve income data for the years 2015 to 2018
tesla_inc = pd.DataFrame()
for year in range(2015, 2019):
year_data = get_income_data(year)
tesla_inc = tesla_inc.append(year_data, ignore_index=True)
# Display the first few rows of the combined DataFrame
print(tesla_inc.head())
# Filter for annual data (assuming startDate and endDate are in ISO format)
tesla_inc['endDate'] = pd.to_datetime(tesla_inc['endDate'])
tesla_inc['startDate'] = pd.to_datetime(tesla_inc['startDate'])
tesla_inc_filtered = tesla_inc[(tesla_inc['startDate'].dt.month == 1) & (tesla_inc['endDate'].dt.month == 12)]
tesla_inc_filtered['Year'] = tesla_inc_filtered['endDate'].dt.year
# Group by Metric and Year, then pivot to wide format
tesla_inc_wide = tesla_inc_filtered.groupby(['Metric', 'Year'])['Amount'].first().unstack()
# Display the final wide-format DataFrame
print(tesla_inc_wide.head())
import pandas as pd
from eod import EodHistoricalData
from datetime import datetime
# Initialize the EOD client with your actual API key
api_key = "67589708e16331.09646582"# 'your_actual_api_key'  # Replace with your actual API key
client = EodHistoricalData(api_key)
# Define the stock ticker
stock_ticker = "AAPL.US"
# Function to retrieve income data for a specific year
def get_income_data(year):
income_data = client.get_fundamental_equity(stock_ticker, filter_='Financials::Income_Statement::yearly')
# Filter for the specific year
return [item for item in income_data if datetime.strptime(item['endDate'], "%Y-%m-%d").year == year]
# Retrieve income data for the years 2015 to 2018
tesla_inc = pd.DataFrame()
for year in range(2015, 2019):
year_data = get_income_data(year)
tesla_inc = tesla_inc.append(year_data, ignore_index=True)
# Display the first few rows of the combined DataFrame
print(tesla_inc.head())
# Filter for annual data (assuming startDate and endDate are in ISO format)
tesla_inc['endDate'] = pd.to_datetime(tesla_inc['endDate'])
tesla_inc['startDate'] = pd.to_datetime(tesla_inc['startDate'])
tesla_inc_filtered = tesla_inc[(tesla_inc['startDate'].dt.month == 1) & (tesla_inc['endDate'].dt.month == 12)]
tesla_inc_filtered['Year'] = tesla_inc_filtered['endDate'].dt.year
# Group by Metric and Year, then pivot to wide format
tesla_inc_wide = tesla_inc_filtered.groupby(['Metric', 'Year'])['Amount'].first().unstack()
# Display the final wide-format DataFrame
print(tesla_inc_wide.head())
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from tabulate import tabulate
# Sample balance sheet data (replace this with your actual data)
data = {
'AssetsCurrent': [50000, 60000],
'NoncurrentAssets': [150000, 160000],
'LiabilitiesCurrent': [30000, 35000],
'NoncurrentLiabilities': [70000, 75000],
'StockholdersEquity': [80000, 85000],
'FiscalYearEnd': ['2021-12-31', '2022-12-31']
}
# Create a DataFrame
balance_sheet = pd.DataFrame(data)
# Create a simple balance sheet view
bs_simple = pd.DataFrame({
'Current Assets': balance_sheet['AssetsCurrent'],
'Noncurrent Assets': balance_sheet['NoncurrentAssets'],
'Current Liabilities': balance_sheet['LiabilitiesCurrent'],
'Noncurrent Liabilities': balance_sheet['NoncurrentLiabilities'],
'Stockholders Equity': balance_sheet['StockholdersEquity'],
'Fiscal Year End': balance_sheet['FiscalYearEnd']
})
# Display the balance sheet in a formatted table
print(tabulate(bs_simple, headers='keys', tablefmt='psql'))
# Debugging: Print columns to check for correct naming
print("Columns in bs_simple:", bs_simple.columns)
# Plotting the balance sheet
plt.figure(figsize=(10, 6))
sns.set(style="whitegrid")
# Create a double stacked bar chart for assets and liabilities
bar_width = 0.35
index = range(len(bs_simple))
# Plotting Current Assets and Current Liabilities
plt.bar(index, bs_simple['Current Assets'], bar_width, label='Current Assets', color='b')
# Check if 'Current Liabilities' exists before plotting
if 'Current Liabilities' in bs_simple.columns:
plt.bar(index, bs_simple['Current Liabilities'], bar_width,
label='Current Liabilities', color='r', bottom=bs_simple['Current Assets'])
else:
print("Column 'Current Liabilities' does not exist in bs_simple.")
# Adding labels and title
plt.xlabel('Fiscal Year End')
plt.ylabel('Amount')
plt.title('Balance Sheet Overview')
plt.xticks(index, bs_simple['Fiscal Year End'])
plt.legend()
# Show plot
plt.tight_layout()
plt.show()
# Proportional plotting (optional)
bs_simple_prop = bs_simple[['Current Assets', 'Current Liabilities']].copy()
bs_simple_prop['Total'] = bs_simple_prop.sum(axis=1)
bs_simple_prop['AssetsProportion'] = bs_simple_prop['Current Assets'] / bs_simple_prop['Total']
bs_simple_prop['LiabilitiesProportion'] = bs_simple_prop['Current Liabilities'] / bs_simple_prop['Total']
# Plot proportional representation
plt.figure(figsize=(10, 6))
sns.barplot(data=bs_simple_prop.melt(id_vars=['Total'], value_vars=['AssetsProportion', 'LiabilitiesProportion']),
x='variable', y='value')
# Adding labels and title for proportional plot
plt.title('Proportional Representation of Assets and Liabilities')
plt.ylabel('Proportion')
plt.xlabel('Categories')
# Show plot
plt.tight_layout()
plt.show()
import pandas as pd
from eod import EodHistoricalData
# Initialize the EOD client with your API key
api_key = "67589708e16331.09646582" #"your api key here"  # Replace with your actual API key
client = EodHistoricalData(api_key)
# Define the stock ticker
stock_ticker = "TSLA.US"
# Download financial statements
balance_sheet = client.get_fundamental_equity(stock_ticker, filter_='Financials::Balance_Sheet::yearly')
income_statement = client.get_fundamental_equity(stock_ticker, filter_='Financials::Income_Statement::yearly')
cash_flow_statement = client.get_fundamental_equity(stock_ticker, filter_='Financials::Cash_Flow::yearly')
# Convert the retrieved data into DataFrames for easier analysis
df_balance_sheet = pd.DataFrame(balance_sheet).T
df_income_statement = pd.DataFrame(income_statement).T
df_cash_flow_statement = pd.DataFrame(cash_flow_statement).T
# Display the first few rows of the income statement
print(df_income_statement.head())
