---
title: "us_census_p127"
format: html
editor: visual
---


## U.S. Census Data

Where location and demographics are important in a business, the US Census provides extensive and reliable data.  R provides several packages to access an use those repositories.  Data from the U.S. Census Bureau is stored in tables, and to find the table for a particular metric you can use the function `acs.lookup` in the `acs` package. Note that to run this code you will need to get and install a census API key which you can request at `https://api.census.gov/data/key_signup.html`.  Install the key with `api.key.install`.

The `acs.fetch` function is used to download data from the US Census American Community Survey. The `acs.lookup` function provides a convenience function to use in advance to locate tables and variables that may be of interest.

`acs.lookup` takes arguments similar to `acs.fetch` — in particular, "table.number", "table.name", and "keyword", as well as "endyear","span", and "dataset" — and searches for matches in the meta-data of the Census tables. When multiple search terms are passed to a given argument (e.g., keyword=c("Female", "GED")), the tool returns matches where ALL of the terms are found; similarly, when more than one lookup argument is used (e.g., table.number="B01001", keyword="Female"), the tool searches for matches that include all of the terms (i.e., terms are combined with a logical "AND", not a logical "OR"). 

Results from `acs.lookup` — which are `acs.lookup` class objects — can then be inspected, subsetted (with [square brackets]), and combined (with c or +) to create custom `acs.lookup` objects to store and later pass to `acs.fetch` which has the following arguments:

- `endyear` an integer indicating the latest year of the data in the survey (e.g., for data from the 2007-2011 5-year ACS data, endyear would be 2011) 

- `span`  an integer indicating the span (in years) of the desired ACS data (should be 1, 3, or 5 for ACS datasets, and 0 for decennial census SF1 and SF3 datasets); defaults to 5, but ignored and reset to 0 if dataset="sf1" or "sf3".

- `geography` a `geo.set` object specifying the census geography or geographies to be
fetched; can be created "on the fly" with a call to geo.make()

- `table.name` a string giving the search term(s) to find in the name of the ACS census table (for example, "Sex" or "Age"); accepts multiple words, which must all be found in the returned table names; always case-sensitive. (Note: when set, this variable is passed to an internal call to acs.lookup—see acs.lookup).

- `table.number` a string (not a number) indicating the table from the Census to fetch; examples: "B01003" or "B23013"; always case-sensitive. Used to fetch all variables
for a given table number; if "table.number" is provided, other lookup variables
("table.name" or "keyword") will be ignored.

- `variable` an object of `acs.lookup` class, or a string or vector of strings
indicating the exact variable number to fetch. Non-`acs.lookup` examples include "B01003_001" or "B23013_003" or c("B01003_001", "B23013_003").

- `keyword` a string or vector of strings giving the search term(s) to find in the name of
the census variable (for example, "Male" or "Haiti");  always case-sensitive.

- `dataset` either "acs" (the default), "sf1", or "sf3", indicating whether to fetch data from
in the American Community Survey or the SF1/SF3 datasets. 


In the following example, we will compute the 2014-2019 female-to-male populations of the U.S. across age groups, and plot these as a bar graph.


```{r  warning=F, error=F, message=F, echo=T}

library(acs)
library(tidyverse)


look <- acs.lookup(endyear = 2019, 
                   keyword=c("Female"))
i_look <- look@results[1:24,c(1,4)] %>% t() 
colnames(i_look) <- i_look[1,]

geo <- geo.make(state = "IL")
fet <- acs.fetch(endyear = 2014, 
          span = 5,
          table.number="B01001",
          keyword=c("Female"),
          geography =  geo)

fet_tbl <-  fet@estimate
fet_tbl <- rbind(fet_tbl,i_look[2,]) %>% t()
colnames(fet_tbl) <- c("population","age_group")

fet_tbl <-as.data.frame(fet_tbl)
# make age_group an ordered factor and convert population to numeric
fet_tbl$age_group <- factor(fet_tbl$age_group, levels = fet_tbl$age_group)
fet_tbl$population <- as.numeric(as.character(fet_tbl$population))
fet_fem <-as.data.frame(fet_tbl)


fet <- acs.fetch(endyear = 2014, 
          span = 5,
          table.number="B01001",
          keyword=c("Male"),
          geography =  geo)

fet_tbl <-  fet@estimate

fet_tbl <- rbind(fet_tbl,i_look[2,]) %>% t()
colnames(fet_tbl) <- c("population","age_group")
fet_tbl <-as.data.frame(fet_tbl)
fet_tbl$age_group <- factor(fet_tbl$age_group, levels = fet_tbl$age_group)
fet_tbl$population <- as.numeric(as.character(fet_tbl$population))
fet_male <-as.data.frame(fet_tbl)

# Compute the ratio of females to males by U.S. county
fet_ratio <- inner_join(fet_fem,fet_male, by = "age_group")
fet_ratio$fem_to_male <- fet_ratio$population.x / fet_ratio$population.y
fet_ratio$age_group <- sub("Female:", "", fet_ratio$age_group)
fet_ratio$age_group <- factor(fet_ratio$age_group, levels = fet_ratio$age_group)

ggplot(fet_ratio[-1,], aes(age_group, fem_to_male)) + 
  geom_col() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  xlab("Age Group") +
  ylab("Female to Male Ratio")

```
 
The first table on the Census Bureau list is "B01001".  Look at `look_tbl = look@results` under `variable.code` for example, the “_009” at the end indicates the column of the table; each column tabulates a different age range for males or females.  

If your end result is to create choropleth maps, using the `choroplethr` package it is more straightforward to use the function `get_acs_data` inside the `choroplethr` package instead of
`acs.fetch` in the `acs` package.  You will still need to load the `acs` package to use `get_acs_data`.

```{r  warning=F, error=F, message=F, echo=T}
library(choroplethr)
library(acs)
library(tidyverse)


# map = one of "state", "county" or "zip"
# column_idx = 15 of table B01001 is "Sex by Age: Male: 45 to 49 years"
# column_idx = 39 of table B01001 is "Sex by Age: Female: 45 to 49 years"

M45 <-  get_acs_data(tableId = "B01001", map = "county", column_idx=15)
F45 <-  get_acs_data(tableId = "B01001", map = "county", column_idx=39)
M45 <- M45[[1]]
head(M45)
F45 <- F45[[1]]
head(F45)

R45 <- inner_join(M45, F45, by = "region")
R45$value <- R45$value.y / R45$value.x

county_choropleth(R45[,c(1,4)], title = "    Female / Male Ratio: 45 - 49 y.o. by County")
```

