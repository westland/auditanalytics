---
title: "metrics_estimates_p67"
format: html
editor: visual
---

## Metrics and Estimates


Statisticians estimate; business analysts measure.   Statisticians often use the terms *statistic* and  *estimate* for values calculated from the data, to draw a distinction between interpretations of the data, and the 'true' state of affairs.  Data scientists and business analysts are more likely to refer to such values as a *metric*. The difference reflects the approach of statistics versus data science: accounting for uncertainty lies at the heart of the discipline of statistics.  Business or organizational objectives are the focus of data science.  

In the past, the auditors initial step when confronted with a new database is to 'foot' the dataset (i.e., compute a total) and 'agree' that total to the client's records (i.e., see whether client's records agree with the computed total).  This is done with the 'sum' command in R.

```{r eval=F,error=F, warning=F, message=F}

disburse <- read.csv("/home/westland/audit_analytics_book/aaa_chapters/tables/ch_2_AP_disbursements_journal.csv") 

summary(disburse)

cat('\n\n Footed total of disbursements journal = ', sum(disburse$amount_paid))

```


R has a number of packages that generate basic statistics fromt the data, beyond that of the built-in *summary* command Here are three of the most useful, applied to our banking industry dataset.


```{r eval=F, error=F, warning=F, message=F}

library(Hmisc)

bank_fin <- read.csv("/home/westland/audit_analytics_book/aaa_chapters/tables/ch_2_yahoo_fin.csv") 

Hmisc::describe(bank_fin)  

```

The *describe* and *describeBy* functions of the *psych* package offer rich reporting of summary statistics, though much of this may be superfluous in auditing.


```{r eval=F, error=F, warning=F, message=F}


library(psych)
## The psych packates allows specific summary-by-group variation, describeBy

psych::describe(bank_fin)
psych::describeBy(bank_fin, bank_fin$name)


```

If the auditor wishes to use summary statistics for further processing, these can be formatted into data frames using the *tidy* function in *broom*; alternatively, the data frames can be used to print formatted tables, which may be included in audit papers.


```{r eval=F, error=F, warning=F, message=F}


library(kableExtra)
library(broom)
library(pastecs)


## Tidy these up and write them as a formated table, using kableExtra 

pastecs::stat.desc(bank_fin) %>%     
  broom::tidy()  %>%               
  kable(longtable=T, caption = "Summary Statistics") %>% 
  kable_styling(full_width = F)

```