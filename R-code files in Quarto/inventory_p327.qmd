---
title: "inventory_p327"
format: html
editor: visual
---

#### Computer Analytic Workpaper Support

The first step in setting up workpapers is the access to the client files.  Here I bring in files germane to the inventory audit. 


```{r  error=F, warning=F, message=F, echo=T, eval=T, message=F, warning=F}

rm(list=ls())
library(readr)
library(tidyverse)
library(broom)
library(stringr)
library(data.table)

## Set the directory for the new files (modify the path as needed)
default_dir <- "/home/westland/audit_analytics_book/audit_simulated_files/"

if (file.exists(default_dir)){
    setwd(default_dir)
} else {
    dir.create(default_dir)
    setwd(default_dir)
}


sales_journal <-  
  read_csv("sales_journal.csv", 
    col_types = cols(X1 = col_skip()))

purchase_journal <-  
  read_csv("purchase_journal.csv", 
    col_types = cols(X1 = col_skip()))

perpetual_inventory_ledger <-  
  read_csv("perpetual_inventory_ledger", 
    col_types = cols(X1 = col_skip()))

fyear_end_ar_ledger <-  
  read_csv("fyear_end_ar_ledger.csv", 
    col_types = cols(X1 = col_skip()))

fyear_begin_inventory_ledger <-  
  read_csv("fyear_begin_inventory_ledger.csv", 
    col_types = cols(X1 = col_skip()))

expenditures <-  
  read_csv("expenditures.csv", 
    col_types = cols(X1 = col_skip()))

disbursement_journal <-  
  read_csv("disbursement_journal.csv", 
    col_types = cols(X1 = col_skip()))

deposit_daily <-  
  read_csv("deposit_daily.csv", 
    col_types = cols(X1 = col_skip()))

daily_ar_balance <-  
  read_csv("daily_ar_balance.csv", 
    col_types = cols(X1 = col_skip()))

collections_journal <-  
  read_csv("collections_journal.csv", 
    col_types = cols(X1 = col_skip()))

ap_ledger <- 
  read_csv("ap_ledger.csv", 
    col_types = cols(X1 = col_skip()))


real_world_ye_inventory <- 
  perpetual_inventory_ledger %>% 
  group_by(sku) %>% 
  inner_join(sales_journal, by="sku") %>% 
  slice(n()) %>% 
  mutate(inv_extended = unit_cost * stock_on_hand) 


```


#### Footing, Reconcile the inventory count to the general ledger. 

Trace the valuation compiled from the physical inventory count to the company's general ledger, to verify that the counted balance was carried forward into the company's accounting records.



```{r  error=F, warning=F, message=F, echo=T, eval=T, message=F, warning=F}


library(tidyverse)

## get the counts by SKU

foot_count <- perpetual_inventory_ledger %>% 
  group_by(sku) %>% 
  slice(n()) %>% 
  select(stock_on_hand) %>% 
  as.data.frame()

## get the unit cost by SKU

foot_sku <- purchase_journal %>% 
  group_by(sku) %>% 
  slice(n()) %>% 
  select(unit_cost) %>% 
  as.data.frame()
  
## extend

foot_value <- perpetual_inventory_ledger %>% 
  group_by(sku) %>% 
  inner_join(sales_journal, by="sku") %>% 
  slice(n()) %>% 
  mutate(inv_value = stock_on_hand * unit_cost) %>% 
  ungroup() %>% 
  select(inv_value)  %>% 
  sum()


cat("Value of inventory (per client books) at year end = $", format(foot_value, big.mark=","))

## compare this to the (unobservable) true value of year end inventory

true_foot_value <- 
  real_world_ye_inventory %>% 
  group_by(sku) %>% 
  inner_join(sales_journal, by="sku") %>% 
  slice(n()) %>% 
  mutate(inv_value = stock_on_hand * unit_cost.x)%>% 
  ungroup() %>% 
  select(inv_value)  %>% 
  sum()


cat("\n Compare to the (unobservable) 
    true value of inventory at year end = $",
    format(true_foot_value, big.mark=",") )

```

#### Cutoff analysis. 

The auditors will examine your procedures for halting any further receiving into the warehouse or shipments from it at the time of the physical inventory count (assuming they have a single year-end count) so that in-transit inventory is excluded. They typically test the last few receiving and shipping transactions prior to the physical count, as well as transactions immediately following it, to see if you are properly accounting for them.


```{r  error=F, warning=F, message=F, echo=T, eval=T, message=F, warning=F}


library(tidyverse)
library(lubridate)
library(kableExtra)


fyear_begin <- paste0(format(Sys.Date(), '%Y'), '-01-01')  # date can be hard-coded if needed
fyear_end <- paste0(format(Sys.Date(), '%Y'), '-12-31')    

sales_journal$invoice_date <- as_date(sales_journal$invoice_date)
sales_journal$shipper_date <- as_date(sales_journal$shipper_date)

sales_cutoff_errors <- sales_journal %>% 
  filter(invoice_date <= fyear_end & shipper_date > fyear_end) %>% 
  select(customer_no,invoice_no, invoice_date, shipper_no, shipper_date, sales_extended)
  

# print the inventory receipts cutoff worksheet

perpetual_inventory_ledger %>% 
  group_by(sku) %>% 
  slice(n()) %>% 
  left_join(ap_ledger, by="sku") %>% 
  filter(receiver_date > fyear_end) %>% 
    kable(
      caption = "Inventory Receipt Cutoff Worksheet 
      (verify that none of these receipts were included in Y/E inventory)",
      "latex", booktabs = T) %>% 
    kable_styling(bootstrap_options = "striped",
    latex_options="scale_down")


```


#### Duplicates and Omissions

Companies index each high-volume class of journal entry (e.g., sales, receipts, etc) with an index number.  Before the widespread use of computer entry for transactions, these were actually preprinted at the top of a multipart document, and auditors were expected to assure that preprinted transaction entry documents were being used, and the sequence of index numbers was fully accounted for.  Omissions or duplicates of an index number might indicate an error in processing which would over or understate the account, and which would cause other internal control problems.   The following code finds duplicates and omissions (gaps in the indexing number on the journal entry transaction document) 


```{r  error=F, warning=F, message=F,  echo=T, eval=T, message=F, warning=F, results='hold' , tidy=T, error=F}


library(tidyverse)
library(stringr)
library(dplyr)


# duplicated records
dup_purchase <- purchase_journal[duplicated(purchase_journal$po_no),]
n <- nrow(dup_purchase)
cat("\n # of duplicate purchases = ", n)

dup_sales <- sales_journal[duplicated(sales_journal$invoice_no),]
n <- nrow(dup_sales)
cat("\n # of duplicate sales = ", n)



receiver_journal <- 
  perpetual_inventory_ledger %>% 
  group_by(sku) %>% 
  slice(n()) %>% 
  left_join(ap_ledger, by="sku")
  
dup_receiver <- receiver_journal[duplicated(receiver_journal$receiver_no),]
n <- nrow(dup_receiver)
cat("\n # of duplicate receivers = ", n)

dup_shipment <- sales_journal[duplicated(sales_journal$shipper_no),]
n <- nrow(dup_shipment)
cat("\n # of duplicate shipments = ", n)



## omissions

po <- as.numeric(substring(purchase_journal$po_no,2))
po_min <- as.numeric(min(po))
po_max <- as.numeric(max(po))

omit <- as.data.frame(setdiff(po_min:po_max,po))
n <- nrow(omit)
cat("\n # of omitted purchase records = ", n)

invoice <- as.numeric(substring(sales_journal$invoice_no,2))
invoice_min <- as.numeric(min(invoice))
invoice_max <- as.numeric(max(invoice))

omit <- as.data.frame(setdiff(invoice_min:invoice_max,invoice))
n <- nrow(omit)
cat("\n # of omitted sales records = ", n)


receiver <- as.numeric(substring(receiver_journal$receiver_no,4))
receiver_min <- as.numeric(min(receiver))
receiver_max <- as.numeric(max(receiver))

omit <- as.data.frame(setdiff(receiver_min:receiver_max,receiver))
n <- nrow(omit)
cat("\n # of omitted receiver records = ", n)


shipments <- as.numeric(substring(sales_journal$shipper_no,2))
shipments_min <- as.numeric(min(shipments))
shipments_max <- as.numeric(max(shipments))

omit <- as.data.frame(setdiff(shipments_min:shipments_max,shipments))
n <- nrow(omit)
cat("\n # of omitted sales records = ", n)

```


#### Physical Count Exceptions to Perpetual Inventory Ledger

The perpetual inventory ledger maintains a running balance of inventory at cost, and is updated from sales and purchase transaction documents.  The actual balance of inventory will vary from the perpetual inventory ledger in both item count and value for several reasons, e.g.:

1. Obsolescence or other cause of decline in market value
1. Damage to items in transit or storage
1. Misclassification or misplacement, often a problem with high volume retailers like Walmart
1. Markdown of value because a returned item was refurbished, or delivered with an open box
1. Quality control issues that reduce finished goods yield, or require markdown of value.

The auditors want to be comfortable with the procedures you use to count the inventory. This means that they will discuss the counting procedure with you, observe counts as they are being done, test count some of the inventory themselves and trace their counts to the amounts recorded by the company's counters, and verify that all inventory count tags were accounted for. If you have multiple inventory storage locations, they may test the inventory in those locations where there are significant amounts of inventory. They may also ask for confirmations of inventory from the custodian of any public warehouse where the company is storing inventory.  The physical count of inventory is not just a count, but offers employees and auditors the opportunity to inspect the condition and marketability of inventory.  Items where value has been significantly marked down, will be subject to Lower of Cost or Market (LOCOM) revaluation discussed in the next subsection. 



```{r  error=F, warning=F, message=F, echo=T, eval=T, fig.cap= "Perpetual vs. Actual Overstatement"}

library(kableExtra)
library(tidyverse)

real_world_ye_inventory <- 
  read_csv("/home/westland/audit_analytics_book/audit_simulated_files/real_world_ye_inventory.csv", 
     col_types = cols(X1 = col_skip()))
real_world_ye_inventory[is.na(real_world_ye_inventory)] <- 0

inventory_count_differences <-
  perpetual_inventory_ledger %>% 
  group_by(sku) %>% 
  left_join(real_world_ye_inventory, by="sku") %>% 
  slice(n()) %>%    ## the final slice, by SKU, will be what is in-stock at year end
  filter(exception != "No exception, count is accurate") %>% 
  mutate(err_perpetual = stock_on_hand - ye_stock_on_hand) %>% 
  select(sku, err_perpetual, unit_cost, count_exception, exception, actual_unit_market) %>% 
  as.data.frame()
  

kable(inventory_count_differences,
      caption = "Perpetual vs. Actual Overstatement 
      (negative implies understatement of perpetual inventory)",
      "latex", booktabs = T) %>% 
    kable_styling(bootstrap_options = "striped")



```



#### Test for lower of cost or market (LOCOM) 

Inventory is typically valued at acquisition cost.  The physical count of inventory is not just a count, but offers employees and auditors the opportunity to inspect the condition and marketability of inventory.  Items where value has been significantly marked down, will be subject to Lower of Cost or Market (LOCOM) revaluation discussed previously.  Auditors are required to apply the lower of cost or market rule to revalue inventory to its net realizable value, and will do so by comparing a selection of market prices to their recorded costs.

```{r  error=F, warning=F, message=F, echo=T, eval=T, fig.cap= "Market and Cost of Inventory by SKU"}


library(tidyverse)

real_world_ye_inventory[is.na(real_world_ye_inventory)] <- 0

inventory_count_differences <- perpetual_inventory_ledger %>% 
  group_by(sku) %>% 
  slice(n()) %>%    ## the final slice, by SKU, will be what is in-stock at year end
  left_join(real_world_ye_inventory, by="sku") %>% 
  filter(exception != "No exception, count is accurate") %>% 
  mutate(err_perpetual = stock_on_hand - ye_stock_on_hand) %>% 
  select(sku, 
         stock_on_hand, 
         ye_stock_on_hand, 
         unit_cost, 
         actual_unit_market, 
         err_perpetual,  
         count_exception, 
         exception) %>% 
  mutate(ye_cost = stock_on_hand * unit_cost,
         ye_market = ye_stock_on_hand * actual_unit_market, 
         inv_markdown = ye_cost - ye_market) %>% 
  select(sku, ye_cost, ye_market, inv_markdown) %>%   
  as.data.frame()

total_inv_markdown <- sum(inventory_count_differences$inv_markdown)
cat("\n Total Amount to Markdown 
    Client's Trial Balance Inventory Amount 
    (by LOCOM rule) = ", 
    total_inv_markdown)
  
library(knitr)
library(kableExtra)
kable(inventory_count_differences, caption = "Market and Cost of Inventory by SKU","latex", booktabs = T) %>% 
  kable_styling(bootstrap_options = "striped") %>% 
   footnote (general = "",
            symbol = c(round(total_inv_markdown,2)),
            general_title = "Total Markdown for LOCOM rule",  
            title_format = c("italic", "underline")
   )



```




#### Audit a subset of high-value items.

If there are items in the inventory that are of unusually high value, the auditors will likely spend extra time counting them in inventory, ensuring that they are valued correctly, and tracing them into the valuation report that carries forward into the inventory balance in the general ledger.


```{r  error=F, warning=F, message=F, echo=T, eval=T, fig.cap="Top 5 inventory SKU by value"}


library(tidyverse)

high_value <- perpetual_inventory_ledger %>% 
  left_join(purchase_journal, by="sku") %>% 
  select(sku,stock_on_hand,unit_cost) %>% 
  mutate(value = stock_on_hand * unit_cost) %>% 
  arrange(desc(value)) %>% 
  slice(1:5) %>%   ## choose highest 5 in value
  as.data.frame()
  
library(knitr)
library(kableExtra)
kable(high_value, caption = "Top 5 inventory SKU by value","latex", booktabs = T) %>% 
  kable_styling(bootstrap_options = "striped")


```


#### Inventory allowances. 

The auditors will determine whether the amounts you have recorded as allowances for obsolete inventory or scrap are adequate, based on your procedures for doing so, historical patterns, "where used" reports, and reports of inventory usage (as well as by physical observation during the physical count). If you do not have such allowances, they may require you to create them.

Obsolete inventory is not just that inventory that is identified as obsolete in the physical count, but also inventory on hand that is not expected to sell in some established period into the future.  Management is often keen to control the holding cost (cost of warehouse space and management) of inventory, as well as the technological obsolescence (newer products arrive that are lower cost or better performing substitutes for the inventory).  Allowances for obsolete inventory are often computed by predicting sales, and determining if there is excess inventory.  Below is a code chunk to perform this calculation.


```{r  error=F, warning=F, message=F, echo=T, eval=T, message=F, warning=F, fig.cap="Allowance for Obsolete Inventory by SKU"}


library(tidyverse)

## assume that the client maintains an inventory balance sufficient for 1 year of sales, 
## and any excess balance is considered obsolete inventory that should be marked down
## to disposal value (which is determined to be 50% of original unit cost)

sales_of_sku_per_year <- sales_journal %>%    ## sales_journal is only for this fiscal year, so this rate is just the sum of sales in the sales_journal
  group_by(sku) %>% 
  summarise(sales_rate = sum(sales_count, na.rm = T))

unit_costs <- purchase_journal %>% 
    group_by(sku) %>% 
    slice(n()) %>% 
    select(sku, unit_cost) %>% 
    as.data.frame()

allowance_for_obsolete_inv <- perpetual_inventory_ledger %>% 
  group_by(sku) %>% 
  slice(n()) %>%    ## the final slice, by SKU, will be what is in-stock at year end
  left_join(sales_of_sku_per_year, by="sku") %>% 
  mutate(years_on_hand = stock_on_hand / sales_rate) %>% 
  left_join(sales_of_sku_per_year, by="sku") %>% 
  left_join(unit_costs, by="sku") %>%  
  select(sku, years_on_hand, stock_on_hand, sales_rate = sales_rate.x, unit_cost) %>% 
  filter(years_on_hand > 1) %>%  ## more than 1 yearstock on hand
  mutate(allowance = (years_on_hand - 1) *  stock_on_hand * unit_cost) %>% 
  select(sku, years_on_hand, stock_on_hand, sales_rate, unit_cost, allowance) %>%   
  as.data.frame()

if(nrow(allowance_for_obsolete_inv) == 0){cat("\n\n No Obsolete Inventory for any SKU  \n\n")}
  
library(knitr)
library(kableExtra)
kable(allowance_for_obsolete_inv, caption = "Allowance for Obsolete Inventory by SKU",
      "latex", booktabs = T) %>% 
  kable_styling(bootstrap_options = "striped")

```

