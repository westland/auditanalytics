---
title: "ram_dashboard_p98"
format: html
editor: visual
---

## Using Shiny to create a Risk Assessment Matrix Dashboard

Auditors face a particular problem in the field, in that much of the information they need may be in prior years' workpapers, in proprietary client files, in central locations in the audit firm, behind fire walls and on powerful servers or cloud platforms.   To secure the clients records and address privacy concerns, it is important that only the necessary information be maintained on mobile platforms such as laptops that are used in the field.  

The standard solution to such problems in client-server systems, that place high-performance, secure systems on a centralized server, and provide the field auditor with light, client software that runs on a laptop, communicating with the server over the internet.  Shiny is the client-server extension of the R language, and as with the rest of the R language, is uniquely suited to handling the *ad hoc* nature of audits, where each audit often represents an entirely new set of analyses.  

Shiny is a tool for fast prototyping of digital dashboards, giving you a large number of HTMLWidgets at your disposal which lend themselves really well to building general purpose web applications.  Shiny is particularly suited for fast prototyping and is fairly easy to use for someone who's not a programmer.   Dashboards locally display some data (such as in a database or a file) providing a variety of metrics in an interactive way. 

Reactive programming starts with reactive values that change in response to user input (such as positioning the confidence and cost sliders) and builds on top of them with reactive expressions that access reactive values and execute other reactive expressions.  Reactivity based code for the Risk Assessment Matrix dashboard appears below.  This has two parts: (1) the user interface 'ui' which conceivably would operate be on the field auditor's laptop, and (2) the server-side 'server' operations that would take place at the audit firms headquarters behind a firewall, and with access to firm and client files.  First I will look at the user interface.


```{r eval=F}

# Define the User Interface (UI) 
ui <- fluidPage(
  
  
  titlePanel("Risk Assessment Matrix"),
  
  sidebarLayout(
    
    sidebarPanel(
      
      # Input: statistical confidence level of the audit tests 
      sliderInput("confidence", "Confidence:",
                  min = .7, max = .999,
                  value = .95),
      
      # Input: cost of auditing per transaction sampled  
      sliderInput("cost", "Audit $ / transaction:",
                  min = 0, max = 500,
                  value = 100),
      
      
      # Input: Text for providing a caption for the RAM 
      textInput(inputId = "caption",
                label = "Client:",
                value = "XYZ Corp.")
     
    ),
    
  
    # Main panel for displaying outputs 
    mainPanel(
      
      # Output: slider values entered 
      tableOutput("values"),
      
        # Output: Formatted text for caption 
        h3(textOutput("caption", container = span)),
      
        # Output: total cost of the audit 
        textOutput("view"), 
     
       # Output: RAM summary with sample sizes (scope) and cost
        verbatimTextOutput("summary"),
        

      
      h6("Risk choices are:  1 = Low,  2=Medium, 3=High"),
      h6("Risk_intel = the risk level indicated by business intelligence scanning"),
      h6("Risk_prior = the risk level indicated by audits in prior years"),
      h6("Account Amount and the Ave. Transaction size are in $ without decimals or 000 dividers"),
      h6("Scope = estimated discovery sample size that will be needed in the audit of this account"),
      h6("Audit cost = audit labor dollars per sampled transaction"),      
      h6("Confidence = statistical confidence")
      
     
    )
  )
)

```
The mathematics of scope assessment takes place on the server.  I used a very simple 'discovery sampling' inspired model  (see chapter 7) to compute audit scope which I interpret as sample sizes for various transaction flows, computed as:

$$n \approx  \frac{log(1-confidence)}{log(1-\frac{10-risk_{intelligence} \times risk_{prior}}{100})}$$

These are dynamically (reactively in the Shiny vernacular) updated for changes in confidence level and transaction auditing costs established by the auditor.  A total audit cost of field tests is computed, to be incorporated into the overall budget of the audit. 

In practice, the server side of the Risk Assessment Matrix will have access to prior years working papers (assuming they are digitized) and to client accounting files, as well as proprietary audit firm data and technologies.  


```{r eval=F}

# Define Server-size calculations
server <- function(input, output) {
  
  # auditors risk assessment matrix generated from prior years' workpapers, etc.
  ram <- read.csv("~/audit_analytics_book/aaa_chapters/tables/risk_asst_matrix.csv")
  
  
  # Reactive expression to create data frame of slider input values 
  sliderValues <- reactive({
    
    data.frame(
      Audit_Parameter = c("confidence",
               "cost"),
      Value = as.character(c(input$confidence,
                             input$cost)),
      stringsAsFactors = FALSE)
      })


  # Show the values in an HTML table ----
  output$values <- renderTable({
    sliderValues()
  })
  
  
  output$caption <- renderText({
    input$caption
  })
  
  
  # Recompute scope and cost whenever input$confidence or input$cost change

  output$summary <- renderPrint({
    ram <- ram
    conf <- input$confidence
    cost <- input$cost
    risk <- (10 - (as.numeric(ram[,2]) * as.numeric(ram[,3])) )/100
    Scope <-  ceiling( log(1-conf) / log( 1- risk))
    ram <- cbind(ram[,1:5], Scope)
    Min_cost <- Scope * cost
    ram <- cbind(ram[,1:6], Min_cost)
    ram
  })
  
 # Recompute minimum audit cost whenever input$confidence or input$cost change
  
  output$view <- renderText({
    ram <- ram
    conf <- input$confidence
    cost <- input$cost
    risk <- (10 - (as.numeric(ram[,2]) * as.numeric(ram[,3])) )/100
    Scope <-  ceiling( log(1-conf) / log( 1- risk))
    ram <- cbind(ram[,1:5], Scope)
    Min_cost <- Scope * cost
    minimum_audit_cost <- sum(Min_cost)
    c("Minimum estimated audit cost = ",minimum_audit_cost)
  })
  }

```

R Studio gives you various options for assembling Shiny apps, including apps with server side code resident on either an RStudio or a bespoke server, and stand-alone client side apps which can be constructed with the following code.

```{r eval=F}

#
#  See http://shiny.rstudio.com/ for documentation
#

library(shiny)

# Define UI for application 
 ** Insert UI Code Here **

# Define server logic required to draw a histogram
 ** Insert Server Code Here **

# Run the application 
shinyApp(ui = ui, server = server)

```

