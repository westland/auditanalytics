---
title: "accessing_edgar_p117"
format: html
editor: visual
---

### Accessing Financial Information from EDGAR (https://www.sec.gov/edgar/)

The EDGAR database at https://www.sec.gov/edgar.shtml [www.sec.gov/edgar.shtml](https://www.sec.gov/edgar.shtml) offers a wealth of financial information on industry competitors, but only if they are publicly traded companies.  Use package `edgar` to extract this information.

 
```{r }


library(edgar)
library(tidyverse)
library(kableExtra)


  cik.no = 0001318605   # Tesla
  form.type = '10-K'
  filing.year = 2018
  quarter = c(1,2,3,4)


# getFilings function takes CIKs, form type, filing year, and quarter of the filing as input. It creates
# new directory ’~/Downloads/Edgar filings_full text’ to store all downloaded filings.

  getFilings(
  cik.no, 
  form.type, 
  filing.year, 
  quarter,
  downl.permit="y")
  

# getFilingsHTML function takes CIKs, form type, filing year, and quarter of the filing as input. The
# function imports edgar filings downloaded via getFilings function; otherwise, it downloads the filings which are not already been downloaded. It then reads # the downloaded filing, scraps main body
# the filing, and save the filing content in '~/Downloads/Edgar filings_HTML view’ directory in HTML format.


getFilingsHTML(
  cik.no = cik.no,
  form.type = form.type,
  filing.year = filing.year,
  quarter = quarter
  )


# This function creates a new directory ’~/Downloads/Master Indexes’ into current working directory to save these Rda Master Index.

getMasterIndex(filing.year)


# Management Discussion creates a new directory with name "~/Downloads/MD&A section text" 


getMgmtDisc(
  cik.no = cik.no,
  filing.year = filing.year)


# getSentiment function takes CIK(s), form type(s), and year(s) as input parameters. The function first
# imports available downloaded filings in local woking directory ’Edgar filings’ created by getFilings
# function; otherwise, it downloads the filings which is not already been downloaded. It then reads the
# filings, cleans the filings, and computes the sentiment measures. The function returns a dataframe
# with filing information, and sentiment measures.



sentiment_analysis <- 
  getSentiment(
  cik.no, 
  form.type, 
  filing.year) %>% 
  t()

  d <- sentiment_analysis
  names <- rownames(d)
  rownames(d) <- NULL
  sentiment_analysis <- cbind(names,d) 
  
  colnames(sentiment_analysis) <- c("sentiment","n")

  sentiment_analysis <- as.data.frame(sentiment_analysis[10:nrow(sentiment_analysis),])
  
ggplot(sentiment_analysis, aes(sentiment, n)) + 
  geom_col() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  xlab("Sentiment") +
  ylab("Frequency expressed in 10-k")
 



```

       
        
### Accessing Financial Information from EDGAR (https://www.sec.gov/edgar/) with the `finreportr` Package


```{r }

library(finreportr)

# The following commands will directly load EDGAR information into the R workspace for analysis

tesla_co <- CompanyInfo("TSLA")
tesla_ann <- AnnualReports("TSLA")
tesla_inc <- GetIncome("TSLA", 2018)
tesla_bs <- GetBalanceSheet("TSLA", 2018)
tesla_cf <- GetCashFlow("TSLA", 2018)

head(tesla_inc)

``` 

The `finreportr` package returns a data.frame in 'long form'.  Because analysis typically benefits from datasets in 'short form' with one row per account, `finreportr` data.frames need to be reshaped.  Hadley Wickham has created a comprehensive package called `reshape2` that uses metaphors of `melt` and `cast`. You `melt` data so that each row is a unique id-variable combination (i.e., is in 'long form') and then you `cast` the melted data into any shape you would like.  There are specific commands for casting data.frames `dcast`, arrays `acast`, and so forth. In the next example, we take the Tesla income statement in 'long form' that we acquired with the `finreportr` package and `dcast` it into a more usable form.


      
```{r eval=T}

library(tidyverse)
library(lubridate)
library(finreportr)
library(reshape2) # uses `melt` and `cast` to with between long and wide formats

tesla_inc <- GetIncome("TSLA", 2018)  %>% 
    rbind(GetIncome("TSLA", 2017)) %>% 
    rbind(GetIncome("TSLA", 2016)) %>% 
    rbind(GetIncome("TSLA", 2015)) 

head(tesla_inc)

tesla_inc <-tesla_inc %>% 
  filter(month(startDate) == 01 & month(endDate) == 12) %>% 
  mutate(Year = year(endDate)) %>% 
  group_by(Metric, Year) %>% 
  slice(1L) %>% 
  dcast(Metric ~ Year, value.var = 'Amount')

head(tesla_inc)

```



















#### Computing Technical Metrics

In the prior section, I showed you how to acquire financial information from the SEC's repositories. This section provides general guidelines for computing technical metrics such as ratios from that statement data.  Consider the calculation of the current ratio which is defined as:

$$ Current Ratio = \frac{Current Assets}{Current Liabilities} $$
Here is how to calculate the ratio from our merged balance sheet obtained from EDGAR data using the `finstr` package. 
 
```{r message=F,error=F, warning=F}

library(devtools)
install_github("bergant/finstr")
library(finstr)
library(tidyverse)
library(kableExtra)
library(XBRL)

# Get EDGAR data in XBRL format from the sec.gov site
# parse XBRL (GM 10-K reports)

xbrl_url2016 <-
"https://www.sec.gov/Archives/edgar/data/1467858/000146785817000028/gm-20161231.xml"

xbrl_url2017 <-
"https://www.sec.gov/Archives/edgar/data/1467858/000146785818000022/gm-20171231.xml"

old_o <- options(stringsAsFactors = FALSE)
xbrl_data_2016 <- xbrlDoAll(xbrl_url2016)
xbrl_data_2017 <- xbrlDoAll(xbrl_url2017)
options(old_o)

st2017 <- xbrl_get_statements(xbrl_data_2017)
st2016 <- xbrl_get_statements(xbrl_data_2016)

balance_sheet2017 <- st2017$ConsolidatedBalanceSheets
balance_sheet2016 <- st2016$ConsolidatedBalanceSheets
balance_sheet <- merge(balance_sheet2017, balance_sheet2016)

##  calculate current ratio 

balance_sheet %>% transmute(
  date = endDate, 
  CurrentRatio = AssetsCurrent / LiabilitiesCurrent
   )


```


Other ratios may be calculated in a similar straightforward manner using the `dplyr` package in the `tidyverse` library.  Note that several other packages (e.g., `edgar`, `finreportr`) are available to extract EDGAR filings.  The `finstr` package can only process links to XBRL files, but `finreportr` can accesse data from both HTML and XBRL files.  


### Visualization of Technical Metrics

Visualizations are compact, yet can reveal patterns that wouldn't be readily identified in the raw data.   This is because the human brain is much more attuned to analyzing visual scenes, than to analyzing lists of numbers and characters.  Visualizing financial statements exposes a limited number of key values, and emphasizes their relationships and trends. In the following code chunk, I aggregate a balance sheet by selected concepts.

```{r message=F,error=F, warning=F}

library(htmlTable)
library(ggplot2)
library(kableExtra)

bs_simple <- expose(balance_sheet,
  
  # Assets
  `Current Assets` = "AssetsCurrent",
  `Noncurrent Assets` = other("Assets"),
  # Liabilites and equity
  `Current Liabilities` = "LiabilitiesCurrent",
  `Noncurrent Liabilities` = other(c("Liabilities", "CommitmentsAndContingencies")),
  `Stockholders Equity` = "StockholdersEquity"
)


## Print the balance sheet; 
## capture the output to a NULL file, and 
## reformat with the kableExtra package

capture.output(bs_table <- 
                 print(
                   bs_simple, 
                   html = FALSE, 
                   big.mark = ",", 
                   dateFormat = "%Y"), 
               file='NUL')

bs_table %>% 
  kable(longtable=T, 
        caption="Abbreviated Balance Sheet",
        "latex", 
        booktabs = T) %>% 
  kable_styling(bootstrap_options = 
                  c("striped", "hover", "condensed"), 
                full_width = F, font_size=10) 

## plot the balance sheet

finstr::plot_double_stacked_bar(bs_simple)

## facet balance sheet DR and CR accounts

finstr::plot_double_stacked_bar(bs_simple, by_date = FALSE)

## use proportional form to highlight changes in balance sheet structure

bs_simple_prop <- proportional(bs_simple)
finstr::plot_double_stacked_bar(bs_simple_prop)

```

