---
title: "stratified_MUS_p315"
format: html
editor: visual
---

## Stratified Samples and Monetary Unit Sampling

PPS and monetary-unit sampling provide substantial increases in accuracy over stratified sampling with effective control of audit costs.  They are also easier to set up (basically, no more difficult than using unstratified random sampling).  The following code chunks create a 3-level stratification, and for comparison, a PPS sampling based on dollar value of the invoice amount.


```{r eval=T, error=F, message=F, warning=F, fig.cap="3-Stratum Horvitz–Thompson estimate of Total Unpaid A/R"}

library(TeachingSampling)
library(tidyverse)
library(broom)
library(knitr)
library(kableExtra)

unpaid_ar <- 
  sales_journal[1:15] %>% 
  filter(cash_not_ar == 0 & 
         collection_date >= fyear_end &
         shipper_date <= fyear_end) %>% 
  select(-X)

## Separate the dataset into three strata and set the sample proportions
unpaid_ar$stratum <- 
  cut(unpaid_ar$sales_extended, breaks=3, labels=c("small", "medium", "large")) 

sample_prop <- data.frame(prop = c(.05,.1,.2), stratum = c("small", "medium", "large"))

# Define the size of each stratum
N <- NULL
for(i in 1:3) N[i] <-summary(unpaid_ar$stratum )[[i]]
Nh <- as.numeric(N[1:3])                          ## vector of stratum sizes
nh = as.numeric(ceiling(N * sample_prop$prop))    ## vector of samples size by stratum

# Draw a stratified sample and estimate
ar_sample <- unpaid_ar[S.STSI(unpaid_ar$stratum, Nh, nh),]
est <- data.frame(unpaid_ar$sales_extended)
estimate <- E.STSI(unpaid_ar$stratum, Nh, nh, est )

## normalize the estimate to reflect the number of transactions in the client's file
normalized_estimate <-  nrow(unpaid_ar) * estimate[,,2]/estimate[1,,1]
normalized_estimate <- round(normalized_estimate, digits=0)

tidy(normalized_estimate) %>%
kable(caption = "3-Stratum Horvitz–Thompson estimate of Total Unpaid A/R","latex", booktabs = T) %>% 
  kable_styling(bootstrap_options = "striped")


```

### PPS

R contains routines to implement probability proportional to scale sampling, which is used in population studies and other areas [@horvitz1952generalization],  The following code shows how this can be applied in an audit setting.

```{r eval=T, error=F, message=F, warning=F, fig.cap="PPS Hansen-Hurwitz estimate of Population Total"}


library(TeachingSampling)
library(tidyverse)
library(broom)
library(knitr)
library(kableExtra)

unpaid_ar <- 
  sales_journal[1:15] %>% 
  filter(cash_not_ar == 0 & 
         collection_date >= fyear_end &
         shipper_date <= fyear_end) %>% 
  select(-X)

# Draw a PPS sample of size 'size' and estimate draw a random sample according to a
# PPS with replacement design
size <- 5
sample_prop <- S.PPS(size,unpaid_ar$sales_extended)   
# returns a matrix of m rows and two columns. 
# Each element of the first column indicates the unit that was selected. 
# Each element of the second column indicates the selection probability of this unit

sample_ar <- unpaid_ar[sample_prop[,1],]

est <- data.frame(unpaid_ar$sales_extended)
estimate <- E.PPS(est,sample_prop[,2])


## normalize the estimate to reflect the number of transactions in the client's file
normalized_estimate <-  nrow(unpaid_ar) * estimate[,2]/estimate[1,1]
normalized_estimate <- round(normalized_estimate, digits=0)

tidy(normalized_estimate) %>%
kable(caption = "PPS Hansen-Hurwitz estimate of Population Total ","latex", booktabs = T) %>% 
  kable_styling(bootstrap_options = "striped")

```
